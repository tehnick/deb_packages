#!/bin/bash
#
# Common script for updating of old style packages

if [ -z "${PACKAGE}" ]; then
    echo "Error: PACKAGE variable is empty!";
    exit 1;
elif [ -z "${NEW_VER}" ]; then
    echo "Error: NEW_VER variable is empty!";
    exit 1;
fi

case "${A_TYPE}" in
"gz")
    export D_ARGS="xzf"
;;
"bz2")
    export D_ARGS="xjf"
;;
"xz")
    export D_ARGS="xJf"
;;
*)
    echo "Tarball type is not defined!"
    exit 1
;;
esac

if [ ! -e "${PACKAGE}_${NEW_VER}.orig.tar.${A_TYPE}" ]; then
    echo "File ${PACKAGE}_${NEW_VER}.orig.tar.${A_TYPE} is not found.";
    exit 0;
fi

if [ -z "${DIR_NAME}" ]; then
    export DIR_NAME="${PACKAGE}-${NEW_VER}"
fi

if [ -z "${OLD_DIR_NAME}" ]; then
    export OLD_DIR_NAME="${PACKAGE}-${OLD_VER}"
fi

if [ "${1}" = "clean" ]; then
    export CLEAN_BUILD="true"
elif [ "${1}" = "fast" ]; then
    export FAST_UPLOAD="true"
fi

if [ "${2}" = "new" ]; then
    export TARGETED_TO_NEW_QUEUE="true"
fi

echo "Updating is started."

rm -rf "${DIR_NAME}" "${PACKAGE}_${NEW_VER}-"*

tar "${D_ARGS}" "${PACKAGE}_${NEW_VER}.orig.tar.${A_TYPE}"
rm -rf "${DIR_NAME}/debian"
cp -rf "${PKG_DIR}/${PACKAGE}-debian/debian" "${DIR_NAME}/debian"

if [ -d "${OLD_DIR_NAME}" ] && [ "${SFX}" = "-1" ]; then
    diff -urN "${OLD_DIR_NAME}" "${DIR_NAME}" > \
              "${TEMP_DIR}/__${PACKAGE}_${OLD_VER_FULL}::${NEW_VER_FULL}.diff"
fi

cd "${TEMP_DIR}/${DIR_NAME}"

echo ;
echo "Uscan:"
uscan --report-status
echo ;

# About --buildinfo-option="-O" see at: https://bugs.debian.org/853795#10

if [ "${SFX}" = "-1" ]; then
    dch -b --force-distribution --distribution "${MAIN_DIST}" -v "${EPOCH}${NEW_VER_FULL}" \
        "${UPDATE_STRING}"
    kwrite debian/changelog &> /dev/null
    nice -n19 debuild -S -sa -d --buildinfo-option="-O" || exit 1
else
    dch -b --force-distribution --distribution "${MAIN_DIST}" -v "${EPOCH}${NEW_VER_FULL}" \
        "Some fixes in package."
    kwrite debian/changelog &> /dev/null
    # debuild -S -sd --buildinfo-option="-O" || exit 1
    nice -n19 debuild -S -sa -d --buildinfo-option="-O" || exit 1
fi


if [ "${FAST_UPLOAD}" = "true" ]; then
    echo ;
    echo "Fast upload (without tests)."
    echo ;
else
    echo ;
    echo "Now will be tests."
    echo ;

    if [ "${CLEAN_BUILD}" = "true" ]; then
        sudo rm -rf "${TEST_DIR}"/*
    else
        rm -rf "${TEST_DIR}"/*
    fi

    mkdir -p "${TEST_DIR}"
    cd "${TEST_DIR}" || exit 1

    cp -a "${TEMP_DIR}/${DIR_NAME}" "${TEST_DIR}/"
    cp -f "${TEMP_DIR}/${PACKAGE}_${NEW_VER}.orig.tar.${A_TYPE}" "${TEST_DIR}/"

    export BUILD_LOG_FILE="${TEMP_DIR}/__${PACKAGE}-${NEW_VER_FULL}.build.log"
    export WARNINGS_LOG_FILE="${TEMP_DIR}/__${PACKAGE}-${NEW_VER_FULL}.warnings.log"
    echo ;

    cd "${TEST_DIR}/${DIR_NAME}"
    echo "Start building packages..."
    if [ "${CLEAN_BUILD}" = "true" ]; then
        sudo time nice -n19 pdebuild --pbuilder cowbuilder \
                                     --buildresult "${TEST_DIR}" \
                                     > ${BUILD_LOG_FILE} \
                                     2> ${WARNINGS_LOG_FILE} || exit 1
        sudo chown -R "${SUDO_USER}:${SUDO_USER}" "${TEST_DIR}"
    else
        time nice -n19 dpkg-buildpackage -rfakeroot -uc -us \
                                         > ${BUILD_LOG_FILE} \
                                         2> ${WARNINGS_LOG_FILE} || exit 1
    fi
    cat  ${WARNINGS_LOG_FILE}
    echo "Finished building packages."
    echo ;

    export LINTIAN_LOG_FILE="${TEMP_DIR}/__${PACKAGE}-${NEW_VER_FULL}.lintian.log"
    cd "${TEST_DIR}"
    echo ;
    echo "Now running lintian:"
    time nice -n19 lintian -ivIE --pedantic ${PACKAGE}_${NEW_VER_FULL}_*.changes > ${LINTIAN_LOG_FILE}
    grep "E: " "${LINTIAN_LOG_FILE}"
    grep "W: " "${LINTIAN_LOG_FILE}"
    grep "I: " "${LINTIAN_LOG_FILE}"
    grep "P: " "${LINTIAN_LOG_FILE}"
    grep "X: " "${LINTIAN_LOG_FILE}"
    echo "Finished running lintian."
    echo ;
    kwrite ${LINTIAN_LOG_FILE} &> /dev/null

    cd "${TEMP_DIR}/${DIR_NAME}"
fi


kwrite debian/changelog &> /dev/null


cd "${TEMP_DIR}"
cp -fr "${DIR_NAME}/debian" "${PKG_DIR}/${PACKAGE}-debian/"


echo "Update finished successfully!"


if [ "${TARGETED_TO_NEW_QUEUE}" = "true" ]; then
    cd "${TEST_DIR}"
    ARCHITECTURE="$(dpkg --print-architecture)"
    debsign "${PACKAGE}_${NEW_VER_FULL}_${ARCHITECTURE}.changes"
    echo "Package is targeted into NEW queue, so binary upload is required:"
    echo "dput -f ftp-eu ${PACKAGE}_${NEW_VER_FULL}_${ARCHITECTURE}.changes"
else
    cd "${TEMP_DIR}"
    echo "Sorce-only upload:"
    echo "dput -f ftp-eu ${PACKAGE}_${NEW_VER_FULL}_source.changes"
fi


konsole &> /dev/null &


# Local repo
if [ "${FAST_UPLOAD}" != "true" ]; then
    export APT_DIR="${MAIN_DIR}/LocalRepo"
    mkdir -p "${APT_DIR}/${PACKAGE}/"
    rm -f "${APT_DIR}/${PACKAGE}"/*.deb
    cp -f "${TEST_DIR}"/*.deb "${APT_DIR}/${PACKAGE}/"
    cd "${APT_DIR}/" || exit 1
    rm -f Packages* InRelease* Release*
    apt-ftparchive packages . > Packages
    gzip -c Packages > Packages.gz
    gpg -abs -o Packages.gpg Packages.gz
fi

